model1 = lm(y~x)
summary(model1)
intercept = model1$coefficients[1]
slope = model1$coefficients[2]
abline(a=intercept, b=slope)
plot(model1$residuals)
N = 100
x = seq(1,10,length=100)
y = 3 + 5*x + rnorm(N, mean=0, sd=ceiling(x))
plot(x, y, ylim=c(0,60))
model1 = lm(y~x)
model2 = lm(y~x)
summary(model1)
summary(model2)
intercept = model2$coefficients[1]
slope = model2$coefficients[2]
plot(model2$residuals))
plot(model2$residuals)
x=c(1,4,2,19,4,12,29,4,9,16)
bootstrapSample = sample(x, size=10, replace=TRUE)
bootstrapSample
sd(bootstrapSample)
mean(bootstrapSample)
xBar = mean(x)
tStar = (mean(bootstrapSample)-xBar)/(sd(bootstrapSample)/sqrt{10})
tStar = (mean(bootstrapSample)-xBar)/(sd(bootstrapSample)/sqrt(10))
B=100
tStar = numeric(B)
for (i in 1:B){
bootstrapSample = sample(x, size=10, replace=TRUE)
mean(bootstrapSample)
sd(bootstrapSample)
tStar[i] = (mean(bootstrapSample)-xBar)/(sd(bootstrapSample)/sqrt(10))
}
hist(tStar)
quantile(tStar,probs = c(0.025, 0.975))
quantile(tStar, probs=c(0.025, 0.975))
lower=quantile(tStar, 0.025)
upper=quantile(tStar, 0.975)
s=sd(x)
xBar-lowerT*s/sqrt(n)
lowerT=quantile(tStar, 0.025)
upperT=quantile(tStar, 0.975)
xBar-lowerT*s/sqrt(n)
n=length(x)
for (i in 1:B){
bootstrapSample = sample(x, size=n, replace=TRUE)
mean(bootstrapSample)
sd(bootstrapSample)
tStar[i] = (mean(bootstrapSample)-xBar)/(sd(bootstrapSample)/sqrt(10))
}
lowerT=quantile(tStar, 0.025)
upperT=quantile(tStar, 0.975)
xBar-lowerT*s/sqrt(n)
xBar+lowerT*s/sqrt(n)
xBar+upperT*s/sqrt(n)
B=1000
tStar = numeric(B)
for (i in 1:B){
bootstrapSample = sample(x, size=n, replace=TRUE)
mean(bootstrapSample)
sd(bootstrapSample)
tStar[i] = (mean(bootstrapSample)-xBar)/(sd(bootstrapSample)/sqrt(10))
}
lowerT = quantile(tStar, 0.025)
upperT = quantile(tStar, 0.975)
xBar+lowerT*s/sqrt(n)
xBar+upperT*s/sqrt(n)
install.packages(c("MASS", "akima", "robustbase"))
install.packages(c("cobs", "robust", "mgcv", "scatterplot3d", "quantreg", "rrcov", "lars", "pwr", "trimcluster", "mc2d", "psych", "Rfit", "DepthProc", "class", "fda", "parallel"))
library(devtools)
install_github("mrxiaohe/WRScpp")
install_github("nicebread/WRS", subdir="pkg")
library(WRS)
onesampb(x)
x
onesampb(x,est=mean())
onesampb(x,est=mean(x))
onesampb(x,est=mean)
B=2000
tStar = numeric(B)
for (i in 1:B){
bootstrapSample = sample(x, size=n, replace=TRUE)
mean(bootstrapSample)
sd(bootstrapSample)
tStar[i] = (mean(bootstrapSample)-xBar)/(sd(bootstrapSample)/sqrt(10))
}
lowerT = quantile(tStar, 0.025)
upperT = quantile(tStar, 0.975)
xBar+lowerT*s/sqrt(n)
xBar+upperT*s/sqrt(n)
plot(tStar)
hist(tStar)
B=2000
tStar = numeric(B)
for (i in 1:B){
bootstrapSample = sample(x, size=n, replace=TRUE)
mean(bootstrapSample)
sd(bootstrapSample)
tStar[i] = (mean(bootstrapSample)-xBar)/(sd(bootstrapSample)/sqrt(n))
}
lowerT = quantile(tStar, 0.025)
upperT = quantile(tStar, 0.975)
xBar+lowerT*s/sqrt(n)
xBar+upperT*s/sqrt(n)
boot = matrix(sample(x, size=length(x)*B, replace=TRUE), nrow=B)
boot
means = apply(boot, 1, mean)
means
hist(means)
means = sort(means)
means
lower = round(0.05/2*B)
50/2000
upper = B-lower
means[lower]
means[upper]
lowerIndex = round(0.05/2*B)
upperIndex = B-lower
means[lowerIndex] # lower bound
means[upperIndex] # upper bound
bootSamples = matrix(sample(x, size=length(x)*B, replace=TRUE), nrow=B)
means = apply(bootSamples, 1, mean)
means = sort(means)
lowerIndex = round(0.05/2*B)
upperIndex = B-lower
means[lowerIndex] # lower bound
means[upperIndex] # upper bound
p_grid = seq(from=0, to=1, length.out=20)
prior = rep(1, 20)
likelihood = dbinom(x=6, size=9, prob=p_grid)
posterior = likelihood * prior
posterior = posterior/sum(posterior)
plot(p_grid, posterior, type="b")
prior = ifelse(p_grid < 0.5, 0, 1)
posterior = likelihood * prior
posterior = posterior/sum(posterior)
plot(p_grid, posterior, type="b")
prior = exp(-5*abs(p_grid - 0.5))
likelihood = dbinom(x=6, size=9, prob=p_grid)
posterior = likelihood * prior
posterior = posterior/sum(posterior)
plot(p_grid, posterior, type="b")
p_grid = seq(from=0, to=1, length.out=1000)
prior = rep(1, 1000)
likelihood = dbinom(x=6, size=9, prob=p_grid)
posterior = likelihood * prior
posterior = posterior/sum(posterior)
samples = sample(p_grid, prob=posterior, size=10000, replace=TRUE)
plot(samples)
plot(density(samples))
library(coda)
sampMCMC = as.mcmc(samples)
HPDinterval(sampMCMC, prob=0.80)
predictions = rbinom(1000, size=9, prob=0.7)
hist(predictions, xlab="water counts")
?hist
library(rethinking)
table(predictions)
plot(table(predictions))
plot(table(predictions), xlim=c(0,9))
predictions = rbinom(1000, size=9, prob=0.7)
plot(table(predictions), xlim=c(0,9))
par(mfrow=c(5,1))
Ps = c(0.1,0.3,0.5,0.7,0.9)
par(mfrow=c(5,1))
Ps = c(0.1,0.3,0.5,0.7,0.9)
for (i in 1:5){
predictions = rbinom(1000, size=9, prob=Ps[i])
plot(table(predictions), xlim=c(0,9))
}
for (i in 1:5){
predictions = rbinom(1000, size=9, prob=Ps[i])
plot(table(predictions), xlim=c(0,9))
}
par(mfrow=c(1,5))
Ps = c(0.1,0.3,0.5,0.7,0.9)
for (i in 1:5){
predictions = rbinom(1000, size=9, prob=Ps[i])
plot(table(predictions), xlim=c(0,9))
}
plot(table(predictions), xlim=c(0,9), ylab="")
Ps = c(0.1,0.3,0.5,0.7,0.9)
for (i in 1:5){
predictions = rbinom(1000, size=9, prob=Ps[i])
plot(table(predictions), xlim=c(0,9), ylab="")
}
par(mfrow=c(1,5))
Ps = c(0.1,0.3,0.5,0.7,0.9)
for (i in 1:5){
predictions = rbinom(1000, size=9, prob=Ps[i])
plot(table(predictions), xlim=c(0,9), ylab="")
}
Ps = c(0.1,0.3,0.5,0.7,0.9)
for (i in 1:5){
predictions = rbinom(1000, size=9, prob=Ps[i])
plot(table(predictions), xlim=c(0,9), ylab="", main=paste("p=",Ps[i]))
}
par(mfrow=c(1,1))
plot(table(predictions), xlim=c(0,9))
par(mfrow=c(1,5))
Ps = c(0.1,0.3,0.5,0.7,0.9)
for (i in 1:5){
predictions = rbinom(1000, size=9, prob=Ps[i])
plot(table(predictions), xlim=c(0,9), ylab="", main=paste("p=",Ps[i]))
}
par(mfrow=c(1,1))
predictions = rbinom(1000, size=9, prob=samples)
plot(table(predictions), xlim=c(0,9))
samples
predictions = rbinom(1e5, size=9, prob=0.7)
plot(table(predictions), xlim=c(0,9))
predictions = rbinom(1e5, size=9, prob=samples)
plot(table(predictions), xlim=c(0,9))
predictions = rbinom(1000, size=9, prob=samples)
plot(table(predictions), xlim=c(0,9))
predictions = rbinom(1e5, size=9, prob=0.7)
plot(table(predictions), xlim=c(0,9))
predictions = rbinom(1e5, size=9, prob=samples)
plot(table(predictions), xlim=c(0,9))
predictions = rbinom(1e5, size=9, prob=Ps[i])
par(mfrow=c(1,5))
Ps = c(0.1,0.3,0.5,0.7,0.9)
for (i in 1:5){
predictions = rbinom(1e5, size=9, prob=Ps[i])
plot(table(predictions), xlim=c(0,9), ylab="", main=paste("p=",Ps[i]))
}
par(mfrow=c(1,1))
predictions = rbinom(1e5, size=9, prob=samples)
plot(table(predictions), xlim=c(0,9))
d <- c(1,0,1,1,1,0,1,0,1)
l <- ifelse(d==1, "W", "L")
# uniform prior
a = 1
b = 1
# draw first plot
i = 0
curve(dbeta(x,a,b),
from=0, to=1, xlab="proportion water", ylab="",
col="black", ylim=c(0,2.75), lwd=2, xaxt="n", yaxt="n"
)
axis(1, at=c(0,0.5,1), labels=c(0,0.5,1))
title(ylab="probability", mgp=c(1,1,0))
text(0.15, 2.5, paste("n =",i))
mtext(paste(l),
at=seq(from=0,to=1,length.out=length(l)),
col=c(rep("darkgray", length(l)))
)
# execute this code chunk once for each subsequent plot
i = i + 1
a.prior = a
b.prior = b
a = a + d[i]
b = b + 1 - d[i]
# plot prior
curve(dbeta(x,a.prior,b.prior),
from=0, to=1,
xlab="probability of water", ylab="",
col="red", lwd=2, lty=2, ylim=c(0,2.75), xaxt="n", yaxt="n"
)
mtext(paste(l),
at=seq(from=0,to=1,length.out=length(l)),
col=c(rep(col1,i), rep( "darkgray", length(l)-i)))
axis(1, at=c(0,0.5,1) , labels=c(0,0.5,1) )
title(ylab="probability", mgp=c(1,1,0))
text(0.15, 2.5, paste("n =", i))
# plot posterior
curve(dbeta(x,a,b),
from=0, to=1,
lwd=2,
add=TRUE
)
i = 0
curve(dbeta(x,a,b),
from=0, to=1, xlab="proportion water", ylab="",
col="black", ylim=c(0,2.75), lwd=2, xaxt="n", yaxt="n"
)
axis(1, at=c(0,0.5,1), labels=c(0,0.5,1))
title(ylab="probability", mgp=c(1,1,0))
text(0.15, 2.5, paste("n =",i))
mtext(paste(l),
at=seq(from=0,to=1,length.out=length(l)),
col=c(rep("darkgray", length(l)))
)
i = 0
curve(dbeta(x,a,b),
from=0, to=1, xlab="proportion water", ylab="",
col="black", ylim=c(0,2.75), lwd=2, xaxt="n", yaxt="n"
)
axis(1, at=c(0,0.5,1), labels=c(0,0.5,1))
title(ylab="probability", mgp=c(1,1,0))
text(0.15, 2.5, paste("n =",i))
mtext(paste(l),
at=seq(from=0,to=1,length.out=length(l)),
col=c(rep("darkgray", length(l)))
)
a = 1
b = 1
# draw first plot
i = 0
curve(dbeta(x,a,b),
from=0, to=1, xlab="proportion water", ylab="",
col="black", ylim=c(0,2.75), lwd=2, xaxt="n", yaxt="n"
)
axis(1, at=c(0,0.5,1), labels=c(0,0.5,1))
title(ylab="probability", mgp=c(1,1,0))
text(0.15, 2.5, paste("n =",i))
mtext(paste(l),
at=seq(from=0,to=1,length.out=length(l)),
col=c(rep("darkgray", length(l)))
)
i = i + 1
a.prior = a
b.prior = b
a = a + d[i]
b = b + 1 - d[i]
# plot prior
curve(dbeta(x,a.prior,b.prior),
from=0, to=1,
xlab="probability of water", ylab="",
col="red", lwd=2, lty=2, ylim=c(0,2.75), xaxt="n", yaxt="n"
)
mtext(paste(l),
at=seq(from=0,to=1,length.out=length(l)),
col=c(rep(col1,i), rep( "darkgray", length(l)-i)))
axis(1, at=c(0,0.5,1) , labels=c(0,0.5,1) )
title(ylab="probability", mgp=c(1,1,0))
text(0.15, 2.5, paste("n =", i))
# plot posterior
curve(dbeta(x,a,b),
from=0, to=1,
lwd=2,
add=TRUE
)
i = i + 1
a.prior = a
b.prior = b
a = a + d[i]
b = b + 1 - d[i]
# plot prior
curve(dbeta(x,a.prior,b.prior),
from=0, to=1,
xlab="probability of water", ylab="",
col="red", lwd=2, lty=2, ylim=c(0,2.75), xaxt="n", yaxt="n"
)
mtext(paste(l),
at=seq(from=0,to=1,length.out=length(l)),
col=c(rep(col1,i), rep( "darkgray", length(l)-i)))
axis(1, at=c(0,0.5,1) , labels=c(0,0.5,1) )
title(ylab="probability", mgp=c(1,1,0))
text(0.15, 2.5, paste("n =", i))
# plot posterior
curve(dbeta(x,a,b),
from=0, to=1,
lwd=2,
add=TRUE
)
i = i + 1
a.prior = a
b.prior = b
a = a + d[i]
b = b + 1 - d[i]
# plot prior
curve(dbeta(x,a.prior,b.prior),
from=0, to=1,
xlab="probability of water", ylab="",
col="red", lwd=2, lty=2, ylim=c(0,2.75), xaxt="n", yaxt="n"
)
mtext(paste(l),
at=seq(from=0,to=1,length.out=length(l)),
col=c(rep(col1,i), rep( "darkgray", length(l)-i)))
axis(1, at=c(0,0.5,1) , labels=c(0,0.5,1) )
title(ylab="probability", mgp=c(1,1,0))
text(0.15, 2.5, paste("n =", i))
# plot posterior
curve(dbeta(x,a,b),
from=0, to=1,
lwd=2,
add=TRUE
)
i = i + 1
a.prior = a
b.prior = b
a = a + d[i]
b = b + 1 - d[i]
# plot prior
curve(dbeta(x,a.prior,b.prior),
from=0, to=1,
xlab="probability of water", ylab="",
col="red", lwd=2, lty=2, ylim=c(0,2.75), xaxt="n", yaxt="n"
)
mtext(paste(l),
at=seq(from=0,to=1,length.out=length(l)),
col=c(rep(col1,i), rep( "darkgray", length(l)-i)))
axis(1, at=c(0,0.5,1) , labels=c(0,0.5,1) )
title(ylab="probability", mgp=c(1,1,0))
text(0.15, 2.5, paste("n =", i))
# plot posterior
curve(dbeta(x,a,b),
from=0, to=1,
lwd=2,
add=TRUE
)
i = i + 1
a.prior = a
b.prior = b
a = a + d[i]
b = b + 1 - d[i]
# plot prior
curve(dbeta(x,a.prior,b.prior),
from=0, to=1,
xlab="probability of water", ylab="",
col="red", lwd=2, lty=2, ylim=c(0,2.75), xaxt="n", yaxt="n"
)
mtext(paste(l),
at=seq(from=0,to=1,length.out=length(l)),
col=c(rep(col1,i), rep( "darkgray", length(l)-i)))
axis(1, at=c(0,0.5,1) , labels=c(0,0.5,1) )
title(ylab="probability", mgp=c(1,1,0))
text(0.15, 2.5, paste("n =", i))
# plot posterior
curve(dbeta(x,a,b),
from=0, to=1,
lwd=2,
add=TRUE
)
d <- c(1,0,1,1,1,0,1,0,1)
l <- ifelse(d==1, "W", "L")
a = 1
b = 1
i = 0
curve(dbeta(x,a,b),
from=0, to=1, xlab="proportion water", ylab="",
col="black", ylim=c(0,2.75), lwd=2, xaxt="n", yaxt="n"
)
axis(1, at=c(0,0.5,1), labels=c(0,0.5,1))
title(ylab="probability", mgp=c(1,1,0))
text(0.15, 2.5, paste("n =",i))
mtext(paste(l),
at=seq(from=0,to=1,length.out=length(l)),
col=c(rep("darkgray", length(l)))
)
i = i + 1
a.prior = a
b.prior = b
a = a + d[i]
b = b + 1 - d[i]
curve(dbeta(x,a.prior,b.prior),
from=0, to=1,
xlab="probability of water", ylab="",
col="red", lwd=2, lty=2, ylim=c(0,2.75), xaxt="n", yaxt="n"
)
mtext(paste(l),
at=seq(from=0,to=1,length.out=length(l)),
col=c(rep(col1,i), rep( "darkgray", length(l)-i)))
mtext(paste(l),
at=seq(from=0,to=1,length.out=length(l)),
col=c(rep("black",i), rep( "darkgray", length(l)-i)))
axis(1, at=c(0,0.5,1) , labels=c(0,0.5,1) )
title(ylab="probability", mgp=c(1,1,0))
text(0.15, 2.5, paste("n =", i))
curve(dbeta(x,a,b),
from=0, to=1,
lwd=2,
add=TRUE
)
i = i + 1
a.prior = a
b.prior = b
a = a + d[i]
b = b + 1 - d[i]
# plot prior
curve(dbeta(x,a.prior,b.prior),
from=0, to=1,
xlab="probability of water", ylab="",
col="red", lwd=2, lty=2, ylim=c(0,2.75), xaxt="n", yaxt="n"
)
mtext(paste(l),
at=seq(from=0,to=1,length.out=length(l)),
col=c(rep("black",i), rep( "darkgray", length(l)-i)))
axis(1, at=c(0,0.5,1) , labels=c(0,0.5,1) )
title(ylab="probability", mgp=c(1,1,0))
text(0.15, 2.5, paste("n =", i))
# plot posterior
curve(dbeta(x,a,b),
from=0, to=1,
lwd=2,
add=TRUE
)
i = i + 1
a.prior = a
b.prior = b
a = a + d[i]
b = b + 1 - d[i]
# plot prior
curve(dbeta(x,a.prior,b.prior),
from=0, to=1,
xlab="probability of water", ylab="",
col="red", lwd=2, lty=2, ylim=c(0,2.75), xaxt="n", yaxt="n"
)
mtext(paste(l),
at=seq(from=0,to=1,length.out=length(l)),
col=c(rep("black",i), rep( "darkgray", length(l)-i)))
axis(1, at=c(0,0.5,1) , labels=c(0,0.5,1) )
title(ylab="probability", mgp=c(1,1,0))
text(0.15, 2.5, paste("n =", i))
# plot posterior
curve(dbeta(x,a,b),
from=0, to=1,
lwd=2,
add=TRUE
)
